// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const WEB_APP_URL = "https://script.google.com/macros/s/AKfycbx6tsy4hyZw_iOKlU5bUSEAVjckwY7SYh4zyaVLn5AftRg7T0gztg3K1AdIOUWCL7Nc_Q/exec";
const WEB_APP_SECRET = "MYKUB_SECRET_2025";

// === –ú–æ–¥–∞–ª–∫–∏ ===
const modalOverlay = document.createElement("div");
modalOverlay.id = "modalOverlay";
modalOverlay.style.cssText = `
  position: fixed; inset: 0;
  background: rgba(0,0,0,0.7);
  display: none; justify-content: center; align-items: center;
  z-index: 999;
`;
document.body.appendChild(modalOverlay);

function closeModal() {
  modalOverlay.style.display = "none";
  modalOverlay.innerHTML = "";
}

// === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã ===
function createModal(title, fields, submitText, onSubmit) {
  modalOverlay.innerHTML = `
    <div class="modal">
      <div class="modal-header">
        <h3>${title}</h3>
        <span id="closeModal" style="cursor:pointer;float:right;font-size:20px;">√ó</span>
      </div>
      <div class="modal-body">
        ${fields.map(f => `
          <input id="${f.id}" type="${f.type || 'text'}" placeholder="${f.placeholder}" style="display:block;width:100%;margin:8px 0;padding:8px;"/>
        `).join("")}
        <button id="submitModal" class="modal-button">${submitText}</button>
      </div>
    </div>
  `;
  modalOverlay.style.display = "flex";

  document.getElementById("closeModal").onclick = closeModal;
  document.getElementById("submitModal").onclick = async () => {
    const data = {};
    for (const f of fields) data[f.id] = document.getElementById(f.id).value.trim();
    await onSubmit(data);
  };
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
async function sendData(payload) {
  try {
    const res = await fetch(WEB_APP_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ ...payload, secret: WEB_APP_SECRET })
    });
    const json = await res.json();
    if (json.ok) {
      alert("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      closeModal();
    } else {
      alert("–û—à–∏–±–∫–∞: " + json.error);
    }
  } catch (e) {
    alert("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.");
  }
}

// === –ú–æ–¥–∞–ª–∫–∞ –∞—Ä–µ–Ω–¥—ã –∫—É–±–∞ ===
function openRentModal(cubeId) {
  createModal(
    `–ó–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É ${cubeId}`,
    [
      { id: "name", placeholder: "–ò–º—è" },
      { id: "contact", placeholder: "–ö–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ–≥—Ä–∞–º / —Ç–µ–ª–µ—Ñ–æ–Ω)" },
      { id: "message", placeholder: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" },
      { id: "link", placeholder: "–°—Å—ã–ª–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)" },
    ],
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
    (data) => sendData({ type: "rent", cubeId, ...data })
  );
}

// === –ú–æ–¥–∞–ª–∫–∞ –ö—É–±–∞ –î–æ–±—Ä–∞ ===
function openStoryModal() {
  createModal(
    "üíö –ö—É–± –î–æ–±—Ä–∞ ‚Äî –ø–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π",
    [
      { id: "name", placeholder: "–ò–º—è" },
      { id: "contact", placeholder: "–ö–æ–Ω—Ç–∞–∫—Ç" },
      { id: "story", placeholder: "–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è" },
      { id: "link", placeholder: "–°—Å—ã–ª–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)" },
    ],
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
    (data) => sendData({ type: "story", ...data })
  );
}

// === –ú–æ–¥–∞–ª–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ===
function openAuctionModal() {
  createModal(
    "üíé –ê—É–∫—Ü–∏–æ–Ω —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫—É–±–∞",
    [
      { id: "bid", placeholder: "–°—Ç–∞–≤–∫–∞ (‚ÇΩ)" },
      { id: "contact", placeholder: "–ö–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ–≥—Ä–∞–º / —Ç–µ–ª–µ—Ñ–æ–Ω)" },
      { id: "link", placeholder: "–°—Å—ã–ª–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)" },
    ],
    "–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É",
    (data) => sendData({ type: "auction", ...data })
  );
}

// === –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∏–∫–æ–≤ ===
document.querySelectorAll(".cube").forEach(cube => {
  cube.addEventListener("click", () => {
    const text = cube.textContent.trim();

    if (text === "–ö–£–ë –î–û–ë–†–ê") {
      openStoryModal();
    } else if (text === "–¶–ï–ù–¢–†") {
      openAuctionModal();
    } else if (text.startsWith("–ì–µ—Ä–æ–π")) {
      alert("–≠—Ç–æ—Ç –∫—É–± –∑–∞–Ω—è—Ç –≥–µ—Ä–æ–µ–º –º–µ—Å—è—Ü–∞ üí´");
    } else {
      openRentModal(text);
    }
  });
});
