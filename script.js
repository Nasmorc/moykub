// ====== –ì–µ–æ–º–µ—Ç—Ä–∏—è –∑–æ–ª–æ—Ç–æ–π —Å–ø–∏—Ä–∞–ª–∏ (r = a + b * theta) ======
const N = 180;
const theta0 = -Math.PI / 2; // —Å—Ç–∞—Ä—Ç —Å–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É
const step = 0.25;           // —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π —à–∞–≥ –ø–æ —É–≥–ª—É ‚Äî —Ä–æ–≤–Ω—ã–µ –≤–∏—Ç–∫–∏
const a = 8;                 // –±–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å
const b = 6.2;               // —à–∞–≥ —Ä–∞–¥–∏—É—Å–∞
const center = { x: 50, y: 50 };

// –¶–µ–Ω—ã –ø–æ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–µ –æ—Ç –∫—Ä–∞—è –∫ —Ü–µ–Ω—Ç—Ä—É: 7 500 ‚Üí 35 000 ‚ÇΩ
const priceMin = 7500, priceMax = 35000;
const growth = Math.pow(priceMax / priceMin, 1 / (N - 1));

const priceByIdx = (innerIdx) => {
  const price = priceMin * Math.pow(growth, (N - 1) - innerIdx);
  return Math.round(price / 100) * 100;
};

// –°—Ç—Ä–æ–∏–º —Ç–æ—á–∫–∏ —Ç–∞–∫, —á—Ç–æ–±—ã #1 –±—ã–ª –° –°–ù–ê–†–£–ñ–ò —Å–Ω–∏–∑—É –∏ –¥–∞–ª—å—à–µ –ø–æ —á–∞—Å–æ–≤–æ–π –∫ —Ü–µ–Ω—Ç—Ä—É
const points = Array.from({ length: N }, (_, i) => {
  const k = (N - 1) - i;             // –≤–Ω–µ—à–Ω–∏–π ‚Üí –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
  const theta = theta0 - step * k;   // –ø–æ —á–∞—Å–æ–≤–æ–π
  const r = a + b * (k + 1);
  const x = center.x + r * Math.cos(theta);
  const y = center.y + r * Math.sin(theta);
  return { x, y };
});

const cubes = points.map((p, i) => ({ id: i + 1, ...p }));

// ====== –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Ä–∞–ª–∏ ======
const layer = document.getElementById('spiralLayer');
const frag = document.createDocumentFragment();
const tooltip = document.getElementById('tooltip');

cubes.forEach((c, idx) => {
  const el = document.createElement('button');
  el.className = 'cube';
  el.style.setProperty('--x', c.x.toFixed(3));
  el.style.setProperty('--y', c.y.toFixed(3));
  el.dataset.id = c.id;
  el.textContent = `#${c.id}`;

  const price = priceByIdx(idx);
  const tipText = `üí∞ ${price.toLocaleString('ru-RU')} ‚ÇΩ/–º–µ—Å`;

  function showTip(evt){
    tooltip.textContent = tipText;
    const rect = evt.currentTarget.getBoundingClientRect();
    tooltip.style.left = `${rect.left + rect.width/2 + window.scrollX}px`;
    tooltip.style.top  = `${rect.top - 8 + window.scrollY}px`;
    tooltip.classList.remove('hidden');
  }
  function moveTip(evt){
    const rect = evt.currentTarget.getBoundingClientRect();
    tooltip.style.left = `${rect.left + rect.width/2 + window.scrollX}px`;
    tooltip.style.top  = `${rect.top - 8 + window.scrollY}px`;
  }
  function hideTip(){ tooltip.classList.add('hidden'); }

  el.addEventListener('mouseenter', showTip);
  el.addEventListener('mousemove', moveTip);
  el.addEventListener('mouseleave', hideTip);
  el.addEventListener('touchstart', (e)=>{ showTip(e); setTimeout(hideTip, 1200); }, {passive:true});

  el.addEventListener('click', () => openModalForCube(c.id, price));

  frag.appendChild(el);
});
layer.appendChild(frag);

// ====== –ú–æ–¥–∞–ª–∫–∞ ======
const modal = document.getElementById('modal');
const modalContent = document.getElementById('modalContent');
const modalClose = document.getElementById('modalClose');

modalClose.addEventListener('click', closeModal);
modal.addEventListener('click', (e) => { if (e.target === modal) closeModal(); });

function closeModal(){
  modal.classList.add('hidden');
  modalContent.innerHTML = '';
}

function openModalForCube(id, price){
  modalContent.innerHTML = `
    <h3>–ö—É–± #${id}</h3>
    <p>–¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã: <strong>${price.toLocaleString('ru-RU')} ‚ÇΩ/–º–µ—Å</strong></p>
    <div class="row">
      <button class="btn" id="btnMore">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
      <button class="btn" id="btnRent">–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å</button>
    </div>
  `;
  modal.classList.remove('hidden');

  document.getElementById('btnMore').onclick = () => {
    modalContent.innerHTML = `
      <h3>–ö—É–± #${id} ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</h3>
      <p>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: <strong>${id}</strong>. –ß–µ–º –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É ‚Äî —Ç–µ–º –¥–æ—Ä–æ–∂–µ.</p>
      <button class="btn secondary" id="btnBack">–ù–∞–∑–∞–¥</button>
    `;
    document.getElementById('btnBack').onclick = () => openModalForCube(id, price);
  };

  document.getElementById('btnRent').onclick = () => {
    modalContent.innerHTML = `
      <h3>–ó–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É ‚Äî –ö—É–± #${id}</h3>
      <div class="field">
        <label>–ò–º—è / –ö–æ–º–ø–∞–Ω–∏—è</label>
        <input id="f_name" placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?" />
      </div>
      <div class="field">
        <label>–¢–µ–ª–µ—Ñ–æ–Ω / Telegram</label>
        <input id="f_phone" placeholder="+7 ... –∏–ª–∏ @username" />
      </div>
      <div class="field">
        <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
        <textarea id="f_msg" rows="3" placeholder="–°—Å—ã–ª–∫–∞, –ª–æ–≥–æ—Ç–∏–ø, –ø–æ–∂–µ–ª–∞–Ω–∏—è..."></textarea>
      </div>
      <div class="row">
        <button class="btn secondary" id="btnCancel">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn" id="btnSend">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</button>
      </div>
    `;
    document.getElementById('btnCancel').onclick = () => openModalForCube(id, price);
    document.getElementById('btnSend').onclick = () => {
      const payload = {
        cube: id,
        name: document.getElementById('f_name').value.trim(),
        contact: document.getElementById('f_phone').value.trim(),
        comment: document.getElementById('f_msg').value.trim(),
        price
      };
      console.log("–ó–∞—è–≤–∫–∞ (–ª–æ–∫–∞–ª—å–Ω–æ):", payload);
      alert("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! (–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)\\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.");
      closeModal();
    };
  };
}

// ====== –ö–ª–∏–∫–∏ –ø–æ –¶–µ–Ω—Ç—Ä—É –∏ –ö–£–ë–£ –î–û–ë–†–ê ======
document.querySelector('.cube.center')?.addEventListener('click', () => {
  modalContent.innerHTML = `
    <h3>–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—É–±</h3>
    <p>–ê—É–∫—Ü–∏–æ–Ω –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∞—Ä–µ–Ω–¥—ã. –û—Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞–≤–∫—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.</p>
    <div class="field"><label>–°—Ç–∞–≤–∫–∞ (‚ÇΩ)</label><input placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 120 000" /></div>
    <div class="field"><label>–ö–æ–Ω—Ç–∞–∫—Ç—ã</label><input placeholder="+7 ... –∏–ª–∏ @username" /></div>
    <div class="row">
      <button class="btn secondary" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
      <button class="btn" onclick="alert('–°—Ç–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)'); closeModal();">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É</button>
    </div>
  `;
  modal.classList.remove('hidden');
});

document.getElementById('cubeGood')?.addEventListener('click', () => {
  modalContent.innerHTML = `
    <h3>–ö–£–ë –î–û–ë–†–ê ‚Äî –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</h3>
    <div class="field"><label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–±–ª–µ–º—ã</label><input placeholder="–ö–æ—Ä–æ—Ç–∫–æ –æ –ø—Ä–æ–±–ª–µ–º–µ" /></div>
    <div class="field"><label>–û–ø–∏—Å–∞–Ω–∏–µ</label><textarea rows="4" placeholder="–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –∏ –∫–∞–∫–∞—è –ø–æ–º–æ—â—å –Ω—É–∂–Ω–∞"></textarea></div>
    <div class="field"><label>–°—Å—ã–ª–∫–∞ / –ö–æ–Ω—Ç–∞–∫—Ç—ã</label><input placeholder="–°–∞–π—Ç, —Å–æ—Ü—Å–µ—Ç—å –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω" /></div>
    <div class="row">
      <button class="btn secondary" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
      <button class="btn" onclick="alert('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)'); closeModal();">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </div>
  `;
  modal.classList.remove('hidden');
});
